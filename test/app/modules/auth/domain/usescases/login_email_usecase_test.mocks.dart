// Mocks generated by Mockito 5.3.2 from annotations
// in appweb/test/app/modules/auth/domain/usescases/login_email_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:appweb/app/core/error/failures.dart' as _i5;
import 'package:appweb/app/modules/auth/data/model/auth_change_password_model.dart'
    as _i7;
import 'package:appweb/app/modules/auth/data/model/auth_model.dart' as _i6;
import 'package:appweb/app/modules/auth/data/model/auth_recovery_password_model.dart'
    as _i8;
import 'package:appweb/app/modules/auth/domain/repository/auth_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthModel>> loginEmail({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginEmail,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.AuthModel>>.value(
            _FakeEither_0<_i5.Failure, _i6.AuthModel>(
          this,
          Invocation.method(
            #loginEmail,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> changePassword(
          {required _i7.AuthChangePasswordModel? model}) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [],
          {#model: model},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #changePassword,
            [],
            {#model: model},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i8.AuthRecoveryPasswordModel>> recoveryPassword(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #recoveryPassword,
          [],
          {#email: email},
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, _i8.AuthRecoveryPasswordModel>>.value(
            _FakeEither_0<_i5.Failure, _i8.AuthRecoveryPasswordModel>(
          this,
          Invocation.method(
            #recoveryPassword,
            [],
            {#email: email},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.AuthRecoveryPasswordModel>>);
}
